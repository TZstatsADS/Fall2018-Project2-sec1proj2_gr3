str(google_reverse_geocode(location = c(40.75042, -73.98928),result_type = c("postal_code"),key = "AIzaSyBDxwaSt6wYBxr3ZJ6Yc7D0k5Q_uqEiiRM"))
str(google_reverse_geocode(location = c(40.75042, -73.98928),result_type = c("postal_code"),key = "AIzaSyBDxwaSt6wYBxr3ZJ6Yc7D0k5Q_uqEiiRM"))$long_name
as.string(google_reverse_geocode(location = c(40.75042, -73.98928),result_type = c("postal_code"),key = "AIzaSyBDxwaSt6wYBxr3ZJ6Yc7D0k5Q_uqEiiRM")$result)
str(google_reverse_geocode(location = c(40.75042, -73.98928),result_type = c("postal_code"),key = "AIzaSyBDxwaSt6wYBxr3ZJ6Yc7D0k5Q_uqEiiRM")$result)
revgeocode(c(40.75042, -73.98928),output="all")
library("ggmap", lib.loc="~/R/win-library/3.4")
revgeocode(c(40.75042, -73.98928),output="all")
library("ggmap", lib.loc="~/R/win-library/3.4")
revgeocode(c(40.75042, -73.98928),output="all")
gc <- as.numeric(geocode('Baylor University'))
library("ggmap", lib.loc="~/R/win-library/3.4")
library("ggmap", lib.loc="~/R/win-library/3.4")
gc <- as.numeric(geocode('Baylor University'))
revgeocode(c(40.75042, -73.98928),output="all")
geocodeQueryCheck()
revgeocode(c(40.75042, -73.98928),output="all")
geocodeQueryCheck()
revgeocode(c(40.75042, -73.98928),output="all")
ggmap::revgeocode(c(40.75042, -73.98928),output="all")
ggmap::revgeocode(c(40.75042, -73.98928),output="all")
ggmap::revgeocode(c(40.75042, -73.98928),output="all")
library("ggmap", lib.loc="~/R/win-library/3.4")
ggmap::revgeocode(c(40.75042, -73.98928),output="all")
devtools::install_github("dkahle/ggmap")
devtools::install_github("dkahle/ggmap")
install.packages("ggmap")
install.packages("ggmap")
library("ggmap", lib.loc="~/R/win-library/3.4")
revgeocode(c(40.75042, -73.98928),output="all")
shiny::runApp('~/GitHub/Spring2018-Project2-Group3/app')
install.packages("dplyr")
runApp('~/GitHub/Spring2018-Project2-Group3/app')
as.string(google_reverse_geocode(location = c(40.75042, -73.98928),result_type = c("postal_code"),key = "AIzaSyBDxwaSt6wYBxr3ZJ6Yc7D0k5Q_uqEiiRM")$result)
google_reverse_geocode(location = c(40.75042, -73.98928),result_type = c("postal_code"),key = "AIzaSyBDxwaSt6wYBxr3ZJ6Yc7D0k5Q_uqEiiRM")
library("googleway", lib.loc="~/R/win-library/3.4")
google_reverse_geocode(location = c(40.75042, -73.98928),result_type = c("postal_code"),key = "AIzaSyBDxwaSt6wYBxr3ZJ6Yc7D0k5Q_uqEiiRM")
google_reverse_geocode(location = c(40.75042, -73.98928),result_type = c("postal_code"),key = "AIzaSyBDxwaSt6wYBxr3ZJ6Yc7D0k5Q_uqEiiRM")[2]
google_reverse_geocode(location = c(40.75042, -73.98928),result_type = c("postal_code"),key = "AIzaSyBDxwaSt6wYBxr3ZJ6Yc7D0k5Q_uqEiiRM")[1]
google_reverse_geocode(location = c(40.75042, -73.98928),result_type = c("postal_code"),key = "AIzaSyBDxwaSt6wYBxr3ZJ6Yc7D0k5Q_uqEiiRM")[3]
google_reverse_geocode(location = c(40.75042, -73.98928),result_type = c("postal_code"),key = "AIzaSyBDxwaSt6wYBxr3ZJ6Yc7D0k5Q_uqEiiRM")[4]
google_reverse_geocode(location = c(40.75042, -73.98928),result_type = c("postal_code"),key = "AIzaSyBDxwaSt6wYBxr3ZJ6Yc7D0k5Q_uqEiiRM")$result
google_reverse_geocode(location = c(40.75042, -73.98928),result_type = c("postal_code"),key = "AIzaSyBDxwaSt6wYBxr3ZJ6Yc7D0k5Q_uqEiiRM")$result[1]
google_reverse_geocode(location = c(40.75042, -73.98928),result_type = c("postal_code"),key = "AIzaSyBDxwaSt6wYBxr3ZJ6Yc7D0k5Q_uqEiiRM")$result[2]
geocodeQueryCheck()
library("ggmap", lib.loc="~/R/win-library/3.4")
library("ggplot2", lib.loc="~/R/win-library/3.4")
google_reverse_geocode(location = c(40.75042, -73.98928),result_type = c("postal_code"),key = "AIzaSyBDxwaSt6wYBxr3ZJ6Yc7D0k5Q_uqEiiRM")$result[2]
google_reverse_geocode(location = c(40.75042, -73.98928),result_type = c("postal_code"),key = "AIzaSyBDxwaSt6wYBxr3ZJ6Yc7D0k5Q_uqEiiRM")$result[formatted_address]
length(google_reverse_geocode(location = c(40.75042, -73.98928),result_type = c("postal_code"),key = "AIzaSyBDxwaSt6wYBxr3ZJ6Yc7D0k5Q_uqEiiRM")$result[2])
typeof(google_reverse_geocode(location = c(40.75042, -73.98928),result_type = c("postal_code"),key = "AIzaSyBDxwaSt6wYBxr3ZJ6Yc7D0k5Q_uqEiiRM")$result[2])
google_reverse_geocode(location = c(40.75042, -73.98928),result_type = c("postal_code"),key = "AIzaSyBDxwaSt6wYBxr3ZJ6Yc7D0k5Q_uqEiiRM")$result[2][1:10]
library("ggmap", lib.loc="~/R/win-library/3.4")
revgeocode(c(40.75042, -73.98928),output="all")
revgeocode(c(40.75042, -73.98928),output="all",key=AIzaSyBDxwaSt6wYBxr3ZJ6Yc7D0k5Q_uqEiiRM)
revgeocode()
help(revgeocode())
revgeocode()
revgeocode
revgeocode(c(40.75042, -73.98928),output="all",signature = "AIzaSyBDxwaSt6wYBxr3ZJ6Yc7D0k5Q_uqEiiRM")
revgeocode(c(40.75042, -73.98928),output="all",client = "AIzaSyBDxwaSt6wYBxr3ZJ6Yc7D0k5Q_uqEiiRM")
revgeocode(c(40.75042, -73.98928),output="all",client = "AIzaSyBDxwaSt6wYBxr3ZJ6Yc7D0k5Q_uqEiiRM",signature = NULL)
revgeocode(c(40.75042, -73.98928),output="all",client = "&key=",signature = "AIzaSyBDxwaSt6wYBxr3ZJ6Yc7D0k5Q_uqEiiRM")
https://maps.googleapis.com/maps/api/geocode/json?latlng=40.714224,-73.961452&key=AIzaSyBDxwaSt6wYBxr3ZJ6Yc7D0k5Q_uqEiiRM
revgeocode_s <- function (location, output = c("address", "more", "all"), messaging = FALSE,
sensor = FALSE, override_limit = FALSE, client = "", signature = "")
{
stopifnot(is.numeric(location) && length(location) == 2)
output <- match.arg(output)
stopifnot(is.logical(messaging))
stopifnot(is.logical(sensor))
if (client != "" && signature != "") {
if (substr(client, 1, 4) != "gme-")
client <- paste("gme-", client, sep = "")
userType <- "business"
}
else if (client == "" && signature != "") {
stop("if signature argument is specified, client must be as well.",
call. = FALSE)
}
else if (client != "" && signature == "") {
stop("if client argument is specified, signature must be as well.",
call. = FALSE)
}
else {
userType <- "free"
}
loc4url <- paste(rev(location), collapse = ",")
if (sensor) {
sensor <- "true"
}
else {
sensor <- "false"
}
sensor4url <- paste("&sensor=", sensor, sep = "")
client4url <- paste("&client=", client, sep = "")
signature4url <- paste("&signature=", signature, sep = "")
url_string <- paste("https://maps.googleapis.com/maps/api/geocode/json?latlng=",
loc4url, sensor4url, sep = "")
if (userType == "business") {
url_string <- paste(url_string, client4url, signature4url,
sep = "")
}
url_string <- URLencode(url_string)
check <- checkGeocodeQueryLimit(url_string, elems = 1, override = override_limit,
messaging = messaging, userType = userType)
if (check == "stop") {
if (output == "address") {
return(NA)
}
else if (output == "more") {
return(c(address = NA, street_number = NA, route = NA,
locality = NA, administrative_area_level_2 = NA,
administrative_area_level_1 = NA, country = NA,
postal_code = NA))
}
else {
return(NA)
}
}
connect <- url(url_string)
rgc <- fromJSON(paste(readLines(connect), collapse = ""))
close(connect)
if (output == "all")
return(rgc)
if (rgc$status != "OK") {
warning(paste("reverse geocode failed - bad location? location = \\"",
location, "\\"", sep = ""))
return(data.frame(address = NA))
}
message(paste0("Information from URL : ", url_string))
if (length(rgc$results) > 1 && messaging) {
message(paste("more than one location found for \\"",
location, "\\", reverse geocoding first...\\n", sep = ""))
}
rgc <- rgc$results[[1]]
if (output == "address")
return(rgc$formatted_address)
with(rgc, {
rgcdf <<- data.frame(address = formatted_address)
})
for (k in seq_along(rgc$address_components)) {
rgcdf <- cbind(rgcdf, rgc$address_components[[k]]$long_name)
}
names(rgcdf) <- c("address", sapply(rgc$address_components,
function(l) l$types[1]))
rgcdf
}
test <- function (location, output = c("address", "more", "all"), messaging = FALSE,
sensor = FALSE, override_limit = FALSE, client = "", signature = "")
{
stopifnot(is.numeric(location) && length(location) == 2)
output <- match.arg(output)
stopifnot(is.logical(messaging))
stopifnot(is.logical(sensor))
if (client != "" && signature != "") {
if (substr(client, 1, 4) != "gme-")
client <- paste("gme-", client, sep = "")
userType <- "business"
}
else if (client == "" && signature != "") {
stop("if signature argument is specified, client must be as well.",
call. = FALSE)
}
else if (client != "" && signature == "") {
stop("if client argument is specified, signature must be as well.",
call. = FALSE)
}
else {
userType <- "free"
}
loc4url <- paste(rev(location), collapse = ",")
if (sensor) {
sensor <- "true"
}
else {
sensor <- "false"
}
sensor4url <- paste("&sensor=", sensor, sep = "")
client4url <- paste("&client=", client, sep = "")
signature4url <- paste("&signature=", signature, sep = "")
url_string <- paste("https://maps.googleapis.com/maps/api/geocode/json?latlng=",
loc4url, sensor4url, sep = "")
if (userType == "business") {
url_string <- paste(url_string, client4url, signature4url,
sep = "")
}
url_string <- URLencode(url_string)
check <- checkGeocodeQueryLimit(url_string, elems = 1, override = override_limit,
messaging = messaging, userType = userType)
if (check == "stop") {
if (output == "address") {
return(NA)
}
else if (output == "more") {
return(c(address = NA, street_number = NA, route = NA,
locality = NA, administrative_area_level_2 = NA,
administrative_area_level_1 = NA, country = NA,
postal_code = NA))
}
else {
return(NA)
}
}
connect <- url(url_string)
rgc <- fromJSON(paste(readLines(connect), collapse = ""))
close(connect)
if (output == "all")
return(rgc)
if (rgc$status != "OK") {
warning(paste("reverse geocode failed - bad location? location = \\"",
location, "\\"", sep = ""))
return(data.frame(address = NA))
}
message(paste0("Information from URL : ", url_string))
if (length(rgc$results) > 1 && messaging) {
message(paste("more than one location found for \\"",
location, "\\", reverse geocoding first...\\n", sep = ""))
}
rgc <- rgc$results[[1]]
if (output == "address")
return(rgc$formatted_address)
with(rgc, {
rgcdf <<- data.frame(address = formatted_address)
})
for (k in seq_along(rgc$address_components)) {
rgcdf <- cbind(rgcdf, rgc$address_components[[k]]$long_name)
}
names(rgcdf) <- c("address", sapply(rgc$address_components,
function(l) l$types[1]))
rgcdf
}
google_reverse_geocode(location = c(40.75042, -73.98928),result_type = c("postal_code"),key = "AIzaSyBDxwaSt6wYBxr3ZJ6Yc7D0k5Q_uqEiiRM")$postal_code
revgeocode(c(40.75042, -73.98928),output="all",client = "&key=",signature = "AIzaSyBDxwaSt6wYBxr3ZJ6Yc7D0k5Q_uqEiiRM")
revgeocode(c(40.75042, -73.98928),output="all")
url_string <- https://maps.googleapis.com/maps/api/geocode/json?latlng=40.714224,-73.961452&key=AIzaSyBDxwaSt6wYBxr3ZJ6Yc7D0k5Q_uqEiiRM
url_string <- "https://maps.googleapis.com/maps/api/geocode/json?latlng=40.714224,-73.961452&key=AIzaSyBDxwaSt6wYBxr3ZJ6Yc7D0k5Q_uqEiiRM"
revgeocode
url_string <- URLencode(url_string)
connect <- url(url_string)
rgc <- fromJSON(paste(readLines(connect), collapse = ""))
install_github("dkahle/ggmap")
devtools::install_github("dkahle/ggmap")
devtools::install_github("dkahle/ggmap")
devtools::install_github("dkahle/ggmap")
install.packages("ggmap")
source(revgeocode.r)
source("revgeocode.r")
##
source("../lib/revgeocode.R")
source("../lib/showPopupHover.R")
##
source("../lib/revgeocode.R")
load("../output/subdat.RData")
shiny::runApp('~/GitHub/Fall2018-Project2-sec1_proj2_gr3/app')
install.packages("C:/Users/ren_g/Desktop/ggmap-master.zip", repos = NULL, type = "win.binary")
revgeocode
revgeocode(c(40.75042, -73.98928))
install.packages("ggmap")
install.packages("ggmap")
revgeocode
revgeocode(c(40.75042, -73.98928))
revgeocode(as.numeric(c(40.75042,-73.98928)),output="more")
library("ggmap", lib.loc="~/R/win-library/3.4")
library("ggplot2", lib.loc="~/R/win-library/3.4")
revgeocode(as.numeric(c(40.75042,-73.98928)),output="more")
library("ggmap", lib.loc="~/R/win-library/3.4")
revgeocode
revgeocode(as.numeric(c(40.75042,-73.98928)),output="more")
install.packages("C:/Users/ren_g/Desktop/ggmap-master.zip", repos = NULL, type = "win.binary")
library("ggmap-mater", lib.loc="~/R/win-library/3.4")
library("ggmap", lib.loc="~/R/win-library/3.4")
library("ggmap", lib.loc="~/R/win-library/3.4")
devtools::install_github("dkahle/ggmap")
library("ggmap", lib.loc="~/R/win-library/3.4")
library("ggmap", lib.loc="~/R/win-library/3.4")
revgeocode
revgeocode(as.numeric(c(40.75042,-73.98928)),output="more")
revgeocode(as.numeric(c(40.75042,-73.98928)),output="all")
revgeocode(as.numeric(c(40.75042,-73.98928)),output="all")
shiny::runApp('~/GitHub/Fall2017-project2-grp6/app')
runApp('~/GitHub/Fall2018-Project2-sec1_proj2_gr3/app')
runApp('~/GitHub/Fall2018-Project2-sec1_proj2_gr3/app')
runApp('~/GitHub/Fall2018-Project2-sec1_proj2_gr3/app')
runApp('~/GitHub/Fall2018-Project2-sec1_proj2_gr3/app')
runApp('~/GitHub/Fall2017-project2-grp6/app')
runApp('~/GitHub/Fall2018-Project2-sec1_proj2_gr3/app')
runApp('~/GitHub/Fall2018-Project2-sec1_proj2_gr3/app')
runApp('~/GitHub/Fall2018-Project2-sec1_proj2_gr3/app')
runApp('~/GitHub/Fall2018-Project2-sec1_proj2_gr3/app')
runApp('~/GitHub/Fall2018-Project2-sec1_proj2_gr3/app')
runApp('~/GitHub/Fall2018-Project2-sec1_proj2_gr3/app')
runApp('~/GitHub/Fall2018-Project2-sec1_proj2_gr3/app')
runApp('~/GitHub/Fall2018-Project2-sec1_proj2_gr3/app')
runApp('~/GitHub/Fall2018-Project2-sec1_proj2_gr3/app')
runApp('~/GitHub/Fall2018-Project2-sec1_proj2_gr3/app')
runApp('~/GitHub/Fall2018-Project2-sec1_proj2_gr3/app')
runApp('~/GitHub/Fall2018-Project2-sec1_proj2_gr3/app')
runApp('~/GitHub/Fall2018-Project2-sec1_proj2_gr3/app')
runApp('~/GitHub/Fall2018-Project2-sec1_proj2_gr3/app')
runApp('~/GitHub/Fall2018-Project2-sec1_proj2_gr3/app')
runApp('~/GitHub/Fall2017-project2-grp6/app')
runApp('~/GitHub/Fall2018-Project2-sec1_proj2_gr3/app')
runApp('~/GitHub/Fall2018-Project2-sec1_proj2_gr3/app')
runApp('~/GitHub/Fall2018-Project2-sec1_proj2_gr3/app')
runApp('~/GitHub/Fall2018-Project2-sec1_proj2_gr3/app')
runApp('~/GitHub/Fall2018-Project2-sec1_proj2_gr3/app')
runApp('~/GitHub/Fall2018-Project2-sec1_proj2_gr3/app')
runApp('~/GitHub/Fall2018-Project2-sec1_proj2_gr3/app')
runApp('~/GitHub/Fall2018-Project2-sec1_proj2_gr3/app')
runApp('~/GitHub/Fall2017-project2-grp6/app')
runApp('~/GitHub/Fall2018-Project2-sec1_proj2_gr3/app')
runApp('~/GitHub/Fall2018-Project2-sec1_proj2_gr3/app')
runApp('~/GitHub/Fall2018-Project2-sec1_proj2_gr3/app')
runApp('~/GitHub/Fall2018-Project2-sec1_proj2_gr3/app')
runApp('~/GitHub/Fall2017-project2-grp6/app')
runApp('~/GitHub/Fall2018-Project2-sec1_proj2_gr3/app')
runApp('~/GitHub/Fall2018-Project2-sec1_proj2_gr3/app')
runApp('~/GitHub/Fall2018-Project2-sec1_proj2_gr3/app')
runApp('~/GitHub/Fall2018-Project2-sec1_proj2_gr3/app')
runApp('~/GitHub/Fall2018-Project2-sec1_proj2_gr3/app')
revgeocode(c(40,-73))
runApp('~/GitHub/Fall2017-project2-grp6/app')
runApp('~/GitHub/Fall2018-Project2-sec1_proj2_gr3/app')
runApp('~/GitHub/Fall2017-project2-grp6/app')
runApp('~/GitHub/Fall2017-project2-grp6/app')
runApp('~/GitHub/Fall2018-Project2-sec1_proj2_gr3/app')
runApp('~/GitHub/Fall2018-Project2-sec1_proj2_gr3/app')
runApp('~/GitHub/Fall2018-Project2-sec1_proj2_gr3/app')
runApp('~/GitHub/Fall2018-Project2-sec1_proj2_gr3/app')
runApp('~/GitHub/Fall2018-Project2-sec1_proj2_gr3/app')
runApp('~/GitHub/Fall2018-Project2-sec1_proj2_gr3/app')
runApp('~/GitHub/Fall2018-Project2-sec1_proj2_gr3/app')
packages.used=c("dplyr", "geosphere", "zipcode", "tigris", "sp","maptools","broom","httr","rgdal")
# check packages that need to be installed.
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
library(dplyr)
library(geosphere)
library(zipcode)
library(tigris)
library(sp)
library(maptools)
library(broom)
library(httr)
library(rgdal)
# load zip code data
data(zipcode)
# Pick out New York City Zipcode
ny<- subset(zipcode, state=='NY'&city=='New York')
summary(ny)
###### map lat and long into zipcode level
crime <- read.csv("NYPD_Complaint_Data_Current_YTD.csv")
nyc.crime <- subset(crime, crime$BORO_NM == "MANHATTAN" )
# create distance matrix
mat <- distm(nyc.crime[,c('Longitude','Latitude')], ny[,c('longitude','latitude')], fun=distVincentyEllipsoid)
# assign the zip code to the point in nyc crime data based on shortest distance in the matrix: May take more than 15 mins
nyc.crime$locality <- ny$zip[max.col(-mat)]
# there are some NAs in Latitude and longtitude, which need to clean out
nyc.crime$Longitude[nyc.crime$locality == 'NA']
nyc.crime.update<-
nyc.crime%>%
filter(!is.na(locality))
nyccrime<-read.csv("/Users/ninashao/Desktop/ADS/Project2/data/Crime /NYC_Crime.csv")
##### data Processing part
# input geojson file
r<-GET('http://catalog.civicdashboards.com/dataset/11fd957a-8885-42ef-aa49-5c879ec93fac/resource/28377e88-8a50-428f-807c-40ba1f09159b/download/nyc-zip-code-tabulation-areas-polygons.geojson')
nyc <- readOGR(content(r,'text'), 'OGRGeoJSON', verbose = F)
load("/Users/ninashao/Desktop/ADS/Project2/data/Crime /nyccrime.RData")
# calculate number of crimes for each zip code
# nyccrime$locality<- as.character(nyccrime$locality)
points_by_zip <- nyccrime %>%
group_by(locality) %>%
summarize(num_points=n())
summary(points_by_zip)
# add num_points (number of crimes zip code level)
subdat_data=nyc@data[,c("PO_NAME", "postalCode")]
data<-left_join(subdat_data, points_by_zip, by= c('postalCode'='locality'))
data$num_points[data$num_points == 'NA'] <- 0
nyc@data$count = data$num_points
# output data as Rdata for drawing map in server
save(nyc,file="/Users/ninashao/Desktop/nyc.Rdata")
View(nyc)
View(data)
nyccrime<-read.csv("market.csv")
##### data Processing part
# input geojson file
r<-GET('http://catalog.civicdashboards.com/dataset/11fd957a-8885-42ef-aa49-5c879ec93fac/resource/28377e88-8a50-428f-807c-40ba1f09159b/download/nyc-zip-code-tabulation-areas-polygons.geojson')
nyc <- readOGR(content(r,'text'), 'OGRGeoJSON', verbose = F)
load("/Users/ninashao/Desktop/ADS/Project2/data/Crime /nyccrime.RData")
# calculate number of crimes for each zip code
# nyccrime$locality<- as.character(nyccrime$locality)
points_by_zip <- nyccrime %>%
group_by(locality) %>%
summarize(num_points=n())
nyccrime<-read.csv("market.csv")
nyccrime<-read.csv("markets.csv")
nyccrime<-read.csv("markets.csv")
nyccrime<-read.csv("C:\Users\ren_g\Desktop\markets.csv")
nyccrime<-read.csv("\Users\ren_g\Desktop\markets.csv")
nyccrime<-read.csv("Users/ren_g/Desktop/markets.csv")
nyccrime<-read.csv("markets.csv")
nyccrime<-read.csv("markets.csv")
read.csv("markets.csv")
nyccrime<-read.csv("markets.csv")
nyccrime<-read.csv("markets.csv")
nyccrime<-read.csv("markets.csv")
nyccrime<-read.csv("C:\Users\ren_g\Desktop\markets.csv")
nyccrime<-read.csv("markets.csv")
nyccrime<-read.csv(markets.csv)
shit <- market.csv
markets <- read.csv("C:/Users/ren_g/Desktop/markets.csv", header=FALSE)
View(markets)
markets <- read.csv("C:/Users/ren_g/Desktop/markets.csv")
View(markets)
nyccrime<-markets
##### data Processing part
# input geojson file
r<-GET('http://catalog.civicdashboards.com/dataset/11fd957a-8885-42ef-aa49-5c879ec93fac/resource/28377e88-8a50-428f-807c-40ba1f09159b/download/nyc-zip-code-tabulation-areas-polygons.geojson')
nyc <- readOGR(content(r,'text'), 'OGRGeoJSON', verbose = F)
load("/Users/ninashao/Desktop/ADS/Project2/data/Crime /nyccrime.RData")
# calculate number of crimes for each zip code
# nyccrime$locality<- as.character(nyccrime$locality)
points_by_zip <- nyccrime %>%
group_by(locality) %>%
summarize(num_points=n())
summary(points_by_zip)
# add num_points (number of crimes zip code level)
subdat_data=nyc@data[,c("PO_NAME", "postalCode")]
data<-left_join(subdat_data, points_by_zip, by= c('postalCode'='locality'))
data$num_points[data$num_points == 'NA'] <- 0
nyc@data$count = data$num_points
# add num_points (number of crimes zip code level)
subdat_data=nyc@data[,c("PO_NAME", "postalCode")]
data<-left_join(subdat_data, points_by_zip, by= c('postalCode'='locality'))
typeof(subdat_data$postalCode)
typeof(points_by_zip$locality)
subdat_data
points_by_zip
data<-left_join(subdat_data, points_by_zip, by= c('postalCode'='locality'))
markets <- read.csv("C:/Users/ren_g/Desktop/markets.csv", stringsAsFactors=FALSE)
View(markets)
nyccrime<-markets
##### data Processing part
# input geojson file
r<-GET('http://catalog.civicdashboards.com/dataset/11fd957a-8885-42ef-aa49-5c879ec93fac/resource/28377e88-8a50-428f-807c-40ba1f09159b/download/nyc-zip-code-tabulation-areas-polygons.geojson')
nyc <- readOGR(content(r,'text'), 'OGRGeoJSON', verbose = F)
load("/Users/ninashao/Desktop/ADS/Project2/data/Crime /nyccrime.RData")
# calculate number of crimes for each zip code
# nyccrime$locality<- as.character(nyccrime$locality)
points_by_zip <- nyccrime %>%
group_by(locality) %>%
summarize(num_points=n())
summary(points_by_zip)
# add num_points (number of crimes zip code level)
subdat_data=nyc@data[,c("PO_NAME", "postalCode")]
data<-left_join(subdat_data, points_by_zip, by= c('postalCode'='locality'))
NYC_Crime <- read.csv("C:/Users/ren_g/Desktop/NYC_Crime.csv", stringsAsFactors=FALSE)
View(NYC_Crime)
nyccrime<-NYC_Crime
##### data Processing part
# input geojson file
r<-GET('http://catalog.civicdashboards.com/dataset/11fd957a-8885-42ef-aa49-5c879ec93fac/resource/28377e88-8a50-428f-807c-40ba1f09159b/download/nyc-zip-code-tabulation-areas-polygons.geojson')
nyc <- readOGR(content(r,'text'), 'OGRGeoJSON', verbose = F)
load("/Users/ninashao/Desktop/ADS/Project2/data/Crime /nyccrime.RData")
# calculate number of crimes for each zip code
# nyccrime$locality<- as.character(nyccrime$locality)
points_by_zip <- nyccrime %>%
group_by(locality) %>%
summarize(num_points=n())
summary(points_by_zip)
# add num_points (number of crimes zip code level)
subdat_data=nyc@data[,c("PO_NAME", "postalCode")]
data<-left_join(subdat_data, points_by_zip, by= c('postalCode'='locality'))
data$num_points[data$num_points == 'NA'] <- 0
nyc@data$count = data$num_points
revgeocode(c(40,-73))
revgeocode(c(40,-73),output="all")
##### data Processing part
# input geojson file
r<-GET('http://catalog.civicdashboards.com/dataset/11fd957a-8885-42ef-aa49-5c879ec93fac/resource/28377e88-8a50-428f-807c-40ba1f09159b/download/nyc-zip-code-tabulation-areas-polygons.geojson')
nyc <- readOGR(content(r,'text'), 'OGRGeoJSON', verbose = F)
nyc
subdat_data
points_by_zip
save(subdat_data,file="~\Desktop\subdat_data.csv")
save(subdat_data,file="C:\Users\ren_g\Desktop\subdat_data.csv")
save(subdat_data,file="C:/Users/ren_g/Desktop/subdat_data.csv")
View(subdat_data)
write.csv(subdat_data,file="C:/Users/ren_g/Desktop/subdat_data.csv")
write.csv(points_by_zip,file="C:/Users/ren_g/Desktop/points_by_zip")
write.csv(points_by_zip,file="C:/Users/ren_g/Desktop/points_by_zip.csv")
data <- read.csv("C:/Users/ren_g/Desktop/subdat_data.csv")
data
nyc@data$count = data$num_points
View(nyc)
write.csv(subdat_data,file="C:/Users/ren_g/Desktop/subdat_data2.csv")
data <- read.csv("C:/Users/ren_g/Desktop/subdat_data2.csv")
nyc@data$count = data$num_points
# output data as Rdata for drawing map in server
save(nyc,file="C:/Users/ren_g/Desktop/nycmarket.Rdata")
load("../output/nycmarket.rdata")
load("../output/nycmarket.rdata")
load("../output/price.RData")
runApp('~/GitHub/Fall2018-Project2-sec1_proj2_gr3/app')
runApp('~/GitHub/Fall2018-Project2-sec1_proj2_gr3/app')
runApp('~/GitHub/Fall2018-Project2-sec1_proj2_gr3/app')
runApp('~/GitHub/Fall2018-Project2-sec1_proj2_gr3/app')
